zabbix_export:
  version: '7.0'
  template_groups:
  - uuid: 6a1e6ab4098547ad9896b1c7077fd1c8
    name: HNS/HughesJ3
  - uuid: 4cd2a1eaedcc4e5995d5d787bbc3971d
    name: HNS/HughesJupiter
  templates:
  - uuid: 420bbaf2d6fd40e4aee5a61c9c8cc4f9
    template: OBM VnoStats API Discovery
    name: OBM VnoStats API Discovery
    description: This template will monitor the satelliteBits field in a JSON response
      from the URL http://<fqdn>:8080/ibm/api/vno/stats/current.
    vendor:
      name: Hughes Network System LLC
      version: 7.0-0-FT
    groups:
    - name: HNS/HughesJ3
    - name: HNS/HughesJupiter
    discovery_rules:
    - uuid: 4f7d8366ca6a4817a43cc245c1dab924
      name: VnoStats Discovery
      type: HTTP_AGENT
      key: vnos.satellite.discovery
      delay: 1h
      filter:
        evaltype: AND
        conditions:
        - macro: '{#VNO}'
          value: ^HNO$
          operator: NOT_MATCHES_REGEX
          formulaid: A
      lifetime_type: DELETE_NEVER
      lifetime: '0'
      enabled_lifetime_type: DISABLE_NEVER
      item_prototypes:
      - uuid: ff0194bb9a004399aac13e22de7bd66b
        name: Foward conf dlMinThruSubscription{#BEAM} VNO {#VNO}
        type: HTTP_AGENT
        key: conf.dlMinThruSubscription[{#BEAM},VNO {#VNOID}]
        history: 90d
        value_type: FLOAT
        trends: 90d
        units: Mbps
        preprocessing:
        - type: JSONPATH
          parameters:
          - $.data.items[?(@.beamName == "{#BEAM}")].vnos[?(@.vnoName == "{#VNO}")].dlMinThruSubscription
        - type: REGEX
          parameters:
          - \[(.*?)\]
          - \1
        timeout: 3s
        url: http://{HOST.CONN}:{$LLD_PORT}/obm/api/vno/stats/current
        follow_redirects: NO
        tags:
        - tag: Beam,VNO
          value: '{#BEAM},{#VNO}'
        - tag: Foward
          value: Conf dlMinThruSubscription
      - uuid: 6acbc34769364b97a9e7e54cab3aec5c
        name: Foward conf dlThruSubscription {#BEAM} VNO {#VNO}
        type: HTTP_AGENT
        key: conf.dlThruSubscription[{#BEAM},VNO {#VNOID}]
        history: 90d
        value_type: FLOAT
        trends: 90d
        units: Mbps
        preprocessing:
        - type: JSONPATH
          parameters:
          - $.data.items[?(@.beamName == "{#BEAM}")].vnos[?(@.vnoName == "{#VNO}")].dlThruSubscription
        - type: REGEX
          parameters:
          - \[(.*?)\]
          - \1
        timeout: 3s
        url: http://{HOST.CONN}:{$LLD_PORT}/obm/api/vno/stats/current
        follow_redirects: NO
        tags:
        - tag: Beam,VNO
          value: '{#BEAM},{#VNO}'
        - tag: Foward
          value: Conf dlThruSubscription
      url: http://{HOST.CONN}:{$LLD_PORT}/obm/api/vno/stats/current
      follow_redirects: NO
      lld_macro_paths:
      - lld_macro: '{#ASSIGNMENTBULK}'
        path: $.assignmentBulk
      - lld_macro: '{#ASSIGNMENTINTERACTIVE}'
        path: $.assignmentInteractive
      - lld_macro: '{#ASSIGNMENTSTREAMING}'
        path: $.assignmentStreaming
      - lld_macro: '{#BEAMID}'
        path: $.beamId
      - lld_macro: '{#BEAM}'
        path: $.beamName
      - lld_macro: '{#CBRSUBSCRIPTION}'
        path: $.cbrSubscription
      - lld_macro: '{#CBRUSAGE}'
        path: $.cbrUsage
      - lld_macro: '{#DEMANDBULK}'
        path: $.demandBulk
      - lld_macro: '{#DEMANDINTERACTIVE}'
        path: $.demandInteractive
      - lld_macro: '{#DEMANDSTREAMING}'
        path: $.demandStreaming
      - lld_macro: '{#DLMINTHRUSUBSCRIPTION}'
        path: $.dlMinThruSubscription
      - lld_macro: '{#DLTHRUSUBSCRIPTION}'
        path: $.dlThruSubscription
      - lld_macro: '{#MULTICASTOFFEREDLOAD}'
        path: $.multicastOfferedLoad
      - lld_macro: '{#MULTICASTSATELLITEBITS}'
        path: $.multicastSatelliteBits
      - lld_macro: '{#MULTICASTSUBSCRIPTION}'
        path: $.multicastSubscription
      - lld_macro: '{#OFFEREDLOAD}'
        path: $.offeredLoad
      - lld_macro: '{#OVERALLASSIGNMENT}'
        path: $.overallAssignment
      - lld_macro: '{#OVERALLDEMAND}'
        path: $.overallDemand
      - lld_macro: '{#SATELLITEBITSBULK}'
        path: $.satelliteBitsBulk
      - lld_macro: '{#SATELLITEBITSCONVERSATIONAL}'
        path: $.satelliteBitsConversational
      - lld_macro: '{#SATELLITEBITSINTERACTIVE}'
        path: $.satelliteBitsInteractive
      - lld_macro: '{#SATELLITEBITSSTREAMING}'
        path: $.satelliteBitsStreaming
      - lld_macro: '{#SATELLITEBITS}'
        path: $.satelliteBits
      - lld_macro: '{#SATID}'
        path: $.satelliteId
      - lld_macro: '{#VNOID}'
        path: $.vnoId
      - lld_macro: '{#VNO}'
        path: $.vnoName
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.data.items[*]
      - type: JAVASCRIPT
        parameters:
        - |
          var output = []; // Initialize an empty array to store the processed results

          try {
              var jsonData = JSON.parse(value); // Parse the JSON input

              // Check if jsonData is an array and contains elements
              if (Array.isArray(jsonData) && jsonData.length > 0) {
                  jsonData.forEach(function(item) { // Loop through each beam item in the array
                      item.vnos.forEach(function(vno) { // Loop through each VNO inside the beam
                          output.push({ // Push a new object with extracted properties into the output array
                              "beamId": item.beamId,  // Store beam ID
                              "beamName": item.beamName, // Store beam name
                              "satelliteId": item.satelliteId, // Store satellite ID

                              "vnoId": vno.vnoId, // Store VNO ID
                              "vnoName": vno.vnoName, // Store VNO name

                              // Demand-related metrics
                              "overallDemand": vno.overallDemand, 
                              "demandInteractive": vno.demandInteractive,
                              "demandStreaming": vno.demandStreaming,
                              "demandBulk": vno.demandBulk,

                              // Assignment-related metrics
                              "overallAssignment": vno.overallAssignment,
                              "assignmentInteractive": vno.assignmentInteractive,
                              "assignmentStreaming": vno.assignmentStreaming,
                              "assignmentBulk": vno.assignmentBulk,

                              // Load and bandwidth-related metrics
                              "offeredLoad": vno.offeredLoad,
                              "satelliteBits": vno.satelliteBits,
                              "satelliteBitsConversational": vno.satelliteBitsConversational,
                              "satelliteBitsInteractive": vno.satelliteBitsInteractive,
                              "satelliteBitsStreaming": vno.satelliteBitsStreaming,
                              "satelliteBitsBulk": vno.satelliteBitsBulk,

                              // CBR (Committed Bit Rate) related metrics
                              "cbrUsage": vno.cbrUsage,
                              "cbrSubscription": vno.cbrSubscription,

                              // Download throughput subscriptions
                              "dlThruSubscription": vno.dlThruSubscription,
                              "dlMinThruSubscription": vno.dlMinThruSubscription,

                              // Multicast-related metrics
                              "multicastOfferedLoad": vno.multicastOfferedLoad,
                              "multicastSatelliteBits": vno.multicastSatelliteBits,
                              "multicastSubscription": vno.multicastSubscription,

                              // Bandwidth status (e.g., Normal, Throttled, etc.)
                              "bandwidthStatus": vno.bandwidthStatus
                          });
                      });
                  });
              }
          } catch (e) {
              // If an error occurs during JSON parsing, return an error message
              return JSON.stringify({"error": "Invalid JSON input"});
          }

          // Convert the output array to a JSON string and return it
          return JSON.stringify(output);

    macros:
    - macro: '{$LLD_PORT}'
      value: '8080'
